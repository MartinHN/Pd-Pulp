/*
  ==============================================================================

    This file was auto-generated by the Introjucer!

    It contains the basic framework code for a JUCE plugin processor.

  ==============================================================================
*/
#include "PluginProcessor.h"
#include "PluginEditor.h"

class FloatParameter : public AudioProcessorParameter
{
public:

    FloatParameter (float defaultParameterValue, const String& paramName)
       : defaultValue (defaultParameterValue),
         value (defaultParameterValue),
         name (paramName)
    {
    }

    float getValue() const override
    {
        return value;
    }

    void setValue (float newValue) override
    {
        value = newValue;
    }

    float getDefaultValue() const override
    {
        return defaultValue;
    }

    String getName (int maximumStringLength) const override
    {
        return name;
    }

    String getLabel() const override
    {
        return String();
    }

    float getValueForText (const String& text) const override
    {
        return text.getFloatValue();
    }

private:
    float defaultValue, value;
    String name;
};


//==============================================================================
PureDataAudioProcessor::PureDataAudioProcessor()
{
    addParameter (freq = new FloatParameter (440.0f/2000.0f, "Frequency"));
    addParameter (volume = new FloatParameter (0.2f, "Volume"));
    addParameter (del_delay = new FloatParameter (0.5f, "Del-Delay"));
    addParameter (del_feedback = new FloatParameter (0.5f, "Del-Feedback"));
    addParameter (del_mode_rate = new FloatParameter (0.5f, "Del-Mod-Rate"));
    addParameter (del_mode_depth = new FloatParameter (0.5f, "Del-Mod-Depth"));
}

PureDataAudioProcessor::~PureDataAudioProcessor()
{
    pd = nullptr;
}

//==============================================================================
const String PureDataAudioProcessor::getName() const
{
    return JucePlugin_Name;
}

const String PureDataAudioProcessor::getInputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

const String PureDataAudioProcessor::getOutputChannelName (int channelIndex) const
{
    return String (channelIndex + 1);
}

bool PureDataAudioProcessor::isInputChannelStereoPair (int index) const
{
    return true;
}

bool PureDataAudioProcessor::isOutputChannelStereoPair (int index) const
{
    return true;
}

bool PureDataAudioProcessor::acceptsMidi() const
{
   #if JucePlugin_WantsMidiInput
    return true;
   #else
    return false;
   #endif
}

bool PureDataAudioProcessor::producesMidi() const
{
   #if JucePlugin_ProducesMidiOutput
    return true;
   #else
    return false;
   #endif
}

bool PureDataAudioProcessor::silenceInProducesSilenceOut() const
{
    return false;
}

double PureDataAudioProcessor::getTailLengthSeconds() const
{
    return 0.0;
}

int PureDataAudioProcessor::getNumPrograms()
{
    return 1;   // NB: some hosts don't cope very well if you tell them there are 0 programs,
                // so this should be at least 1, even if you're not really implementing programs.
}

int PureDataAudioProcessor::getCurrentProgram()
{
    return 0;
}

void PureDataAudioProcessor::setCurrentProgram (int index)
{
}

const String PureDataAudioProcessor::getProgramName (int index)
{
    return String();
}

void PureDataAudioProcessor::changeProgramName (int index, const String& newName)
{
}

//==============================================================================
void PureDataAudioProcessor::prepareToPlay (double sampleRate, int samplesPerBlock)
{
    // Use this method as the place to do any pre-playback
    // initialisation that you need..
    pd = new pd::PdBase;
    pd->init (getNumInputChannels(), getNumOutputChannels(), sampleRate);

    int numChannels = jmin (getNumInputChannels(), getNumOutputChannels());
    pdInBuffer.calloc (pd->blockSize() * numChannels);
    pdOutBuffer.calloc (pd->blockSize() * numChannels);
    patch = pd->openPatch ("test4.pd", "/Users/olivergreschke/Documents/JUCEPureData/Source");
    jassert (patch.isValid());
	
    pd->computeAudio (true);
    pos = 0;
}

void PureDataAudioProcessor::releaseResources()
{
    // When playback stops, you can use this as an opportunity to free up any
    // spare memory, etc.
    if (pd != nullptr)
    {
        pd->computeAudio (false);
        pd->closePatch (patch);
    }

    pd = nullptr;
    pdInBuffer.free();
    pdOutBuffer.free();
}

/*

void PureDataAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());

    int numChannels = jmin (getNumInputChannels(), getNumOutputChannels());
    int len = buffer.getNumSamples();
    int idx = 0;

    pd->sendFloat ("freq", freq->getValue() * 2000.0f);
    pd->sendFloat ("volume", volume->getValue() * 1.0f);
    pd->sendFloat ("del_delay", del_delay->getValue() );
    pd->sendFloat ("del_feedback", del_feedback->getValue() );
    pd->sendFloat ("del_mod_rate", del_mode_rate->getValue() );
    pd->sendFloat ("del_mod_depth", del_mode_depth->getValue() );

    MidiMessage message;
    int samplePosition = buffer.getNumSamples();
    MidiBuffer::Iterator it (midiMessages);
    
    if (! it.getNextEvent (message, samplePosition))
    {
	samplePosition = buffer.getNumSamples();
    }

    while (len > 0)
    {
	int max = jmin (len, pd->blockSize());

	// interleave audio
	{
	    float* dstBuffer = pdInBuffer.getData() + pos;
	    const float* srcBuffer = pdOutBuffer.getData() + pos;

	    for (int i = 0; i < max; ++i)
	    {
		for (int channelIndex = 0; channelIndex < numChannels; ++channelIndex)
		{
		    *dstBuffer++ = buffer.getReadPointer(channelIndex) [idx + i];
		    buffer.getWritePointer (channelIndex) [idx + i] = *srcBuffer++;
		}
	    }
	    pos++;
	}

	if (pos >= pd->blockSize())
	{
	    if (idx >= samplePosition && idx <= (samplePosition + pd->blockSize()))
	    {
		if (message.isNoteOn (true))
		    pd->sendNoteOn (message.getChannel(), message.getNoteNumber(), message.getVelocity());
		else if (message.isController())
		    pd->sendControlChange (message.getChannel(), message.getControllerNumber(), message.getControllerValue());
		else if (message.isProgramChange())
		    pd->sendProgramChange (message.getChannel(), message.getProgramChangeNumber());
		else if (message.isPitchWheel())
		    pd->sendPitchBend (message.getChannel(), message.getPitchWheelValue());
		// TODO add remaining midi types

		if (! it.getNextEvent (message, samplePosition))
		{
		    samplePosition = buffer.getNumSamples();
		}
	    }
	    pd->processFloat (1, pdInBuffer.getData(), pdOutBuffer.getData());
	    pos = 0;
	}

	idx += max;
	len -= max;
    }
}
 
*/

void PureDataAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output channels that didn't contain input data, (because these aren't guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback when they first compile the plugin, but obviously you don't need to this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    int numChannels = jmin (getNumInputChannels(), getNumOutputChannels());
    int len = buffer.getNumSamples();
    int idx = 0;
    
    //pd->sendFloat ("freq", freq->getValue() * 2000.0f);
    //pd->sendFloat ("volume", volume->getValue() * 1.0f);
    pd->sendFloat ("del_delay", del_delay->getValue() );
    pd->sendFloat ("del_feedback", del_feedback->getValue() );
    pd->sendFloat ("del_mod_rate", del_mode_rate->getValue() );
    pd->sendFloat ("del_mod_depth", del_mode_depth->getValue() );
    
    //pd->sendNoteOn(<#const int channel#>, <#const int pitch#>)
    
    MidiMessage message;
    MidiBuffer::Iterator it (midiMessages);
    int samplePosition = buffer.getNumSamples();
    
    while (it.getNextEvent (message, samplePosition))
    {
        if (message.isNoteOn (true)) {
            pd->sendFloat("freq",powf(2.0, (message.getNoteNumber() - 69 ) / 12)*440.0);
            pd->sendNoteOn (message.getChannel(), message.getNoteNumber(), message.getVelocity());
            pd->sendFloat("volume",message.getVelocity()/128.0f );
        }
        if (message.isNoteOff (true)) {
            pd->sendFloat("volume",0.0 );
        }    }
    
    while (len > 0)
    {
        int max = jmin (len, pd->blockSize());
        
        /* interleave audio */
        {
            float* dstBuffer = pdInBuffer.getData();
            for (int i = 0; i < max; ++i)
            {
                for (int channelIndex = 0; channelIndex < numChannels; ++channelIndex)
                    *dstBuffer++ = buffer.getReadPointer(channelIndex) [idx + i];
            }
        }
        
        pd->processFloat (1, pdInBuffer.getData(), pdOutBuffer.getData());
        
        /* write-back */
        {
            const float* srcBuffer = pdOutBuffer.getData();
            for (int i = 0; i < max; ++i)
            {
                for (int channelIndex = 0; channelIndex < numChannels; ++channelIndex)
                    buffer.getWritePointer (channelIndex) [idx + i] = *srcBuffer++;
            }
        }
        
        idx += max;
        len -= max;
    }
}


// Old

/*
void PureDataAudioProcessor::processBlock (AudioSampleBuffer& buffer, MidiBuffer& midiMessages)
{
    // In case we have more outputs than inputs, this code clears any output
    // channels that didn't contain input data, (because these aren't
    // guaranteed to be empty - they may contain garbage).
    // I've added this to avoid people getting screaming feedback
    // when they first compile the plugin, but obviously you don't need to
    // this code if your algorithm already fills all the output channels.
    for (int i = getNumInputChannels(); i < getNumOutputChannels(); ++i)
        buffer.clear (i, 0, buffer.getNumSamples());
    
    int numChannels = jmin (getNumInputChannels(), getNumOutputChannels());
    int len = buffer.getNumSamples();
    int idx = 0;
    
    pd->sendFloat ("freq", freq->getValue() * 2000.0f);
    pd->sendFloat ("volume", volume->getValue() * 1.0f);
    pd->sendFloat ("del_delay", del_delay->getValue() );
    pd->sendFloat ("del_feedback", del_feedback->getValue() );
    pd->sendFloat ("del_mod_rate", del_mode_rate->getValue() );
    pd->sendFloat ("del_mod_depth", del_mode_depth->getValue() );
    
    //pd->sendNoteOn(<#const int channel#>, <#const int pitch#>)
    
    while (len > 0)
    {
        int max = jmin (len, pd->blockSize());
        
        /interleave audio
        {
            float* dstBuffer = pdInBuffer.getData();
            for (int i = 0; i < max; ++i)
            {
                for (int channelIndex = 0; channelIndex < numChannels; ++channelIndex)
                    *dstBuffer++ = buffer.getReadPointer(channelIndex) [idx + i];
            }
        }
        
        pd->processFloat (1, pdInBuffer.getData(), pdOutBuffer.getData());
        
        // write-back
        {
            const float* srcBuffer = pdOutBuffer.getData();
            for (int i = 0; i < max; ++i)
            {
                for (int channelIndex = 0; channelIndex < numChannels; ++channelIndex)
                    buffer.getWritePointer (channelIndex) [idx + i] = *srcBuffer++;
            }
        }
        
        idx += max;
        len -= max;
    }
}

*/
//==============================================================================
bool PureDataAudioProcessor::hasEditor() const
{
    return false; // (change this to false if you choose to not supply an editor)
}

AudioProcessorEditor* PureDataAudioProcessor::createEditor()
{
    return nullptr;
}

//==============================================================================
void PureDataAudioProcessor::getStateInformation (MemoryBlock& destData)
{
    // You should use this method to store your parameters in the memory block.
    // You could do that either as raw data, or use the XML or ValueTree classes
    // as intermediaries to make it easy to save and load complex data.
}

void PureDataAudioProcessor::setStateInformation (const void* data, int sizeInBytes)
{
    // You should use this method to restore your parameters from this memory block,
    // whose contents will have been created by the getStateInformation() call.
}

//==============================================================================
// This creates new instances of the plugin..
AudioProcessor* JUCE_CALLTYPE createPluginFilter()
{
    return new PureDataAudioProcessor();
}
